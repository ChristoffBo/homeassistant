#!/usr/bin/env bash
# Enhanced with Gitea & Gotify support

# Load configuration
CONFIG_PATH=/data/options.json
source /usr/bin/run.sh

# Initialize variables
UPDATED_ADDONS=()
FAILED_ADDONS=()
CHECKED_ADDONS=()

# Gitea API function
update_gitea() {
    local repo_owner=$1
    local repo_name=$2
    local addon_path=$3
    local addon_name=$(basename "$addon_path")
    local temp_repo_path="/tmp/${repo_name}_${RANDOM}"
    
    CHECKED_ADDONS+=("$addon_name")

    # Extract domain from API URL
    local gitea_domain=$(echo "$GITEA_API_URL" | awk -F/ '{print $3}')
    local api_url="$GITEA_API_URL/repos/$repo_owner/$repo_name/commits?path=$addon_path&limit=1"
    [ "$LOG_LEVEL" = "debug" ] && echo "Gitea API: $api_url"

    # Get latest commit
    local latest_commit=$(curl -s -H "Authorization: token $GITEA_TOKEN" -H "Accept: application/json" "$api_url" | jq -r '.[0].sha')
    [ "$LOG_LEVEL" = "debug" ] && echo "Latest commit: $latest_commit"

    # Clone repo
    local repo_url="https://$repo_owner:$GITEA_TOKEN@$gitea_domain/$repo_owner/$repo_name.git"
    git clone --branch "$REPO_BRANCH" --depth 1 --quiet "$repo_url" "$temp_repo_path"

    # Compare and update
    if [ -d "$REPO_PATH/$addon_path" ]; then
        local current_commit=$(git -C "$REPO_PATH/$addon_path" rev-parse HEAD 2>/dev/null)
        if [ "$current_commit" != "$latest_commit" ]; then
            echo "Updating $addon_name..."
            rsync -a --delete "$temp_repo_path/$addon_path/" "$REPO_PATH/$addon_path/"
            UPDATED_ADDONS+=("$addon_name")
        else
            echo "$addon_name is up-to-date"
        fi
    else
        echo "Addon $addon_name not found at $REPO_PATH/$addon_path!"
        FAILED_ADDONS+=("$addon_name")
    fi

    rm -rf "$temp_repo_path"
}

# Gotify notification function
send_gotify() {
    local title=$1
    local message=$2
    if [ -n "$GOTIFY_URL" ] && [ -n "$GOTIFY_TOKEN" ] && [ "$ENABLE_NOTIFICATIONS" = "true" ]; then
        curl -s -X POST "$GOTIFY_URL/message?token=$GOTIFY_TOKEN" \
            -F "title=$title" \
            -F "message=$message" \
            -F "priority=5" \
            --insecure > /dev/null
        [ "$LOG_LEVEL" = "debug" ] && echo "Sent Gotify notification"
    fi
}

# Main update function
update_addons() {
    echo "Starting addon updates with source: $REPO_SOURCE"
    
    # Load addon paths from config
    IFS=$'\n' read -d '' -r -a ADDON_PATHS_ARRAY < <(jq -r '.addon_paths[]' $CONFIG_PATH)
    
    for addon_path in "${ADDON_PATHS_ARRAY[@]}"; do
        case $REPO_SOURCE in
            gitea)
                update_gitea "$REPO_OWNER" "$REPO_NAME" "$addon_path"
                ;;
            github)
                # Original github update function would go here
                CHECKED_ADDONS+=("$(basename "$addon_path")")
                echo "Checking GitHub: $addon_path"
                ;;
            gitlab)
                # Original gitlab update function would go here
                CHECKED_ADDONS+=("$(basename "$addon_path")")
                echo "Checking GitLab: $addon_path"
                ;;
            *)
                echo "Unknown repo source: $REPO_SOURCE"
                ;;
        esac
    done

    # Send detailed notification
    if [ "$ENABLE_NOTIFICATIONS" = "true" ]; then
        local message="⚙️ Addon Update Report\n\n"
        message+="🔍 Checked: ${#CHECKED_ADDONS[@]} addons\n"
        message+="🔄 Updated: ${#UPDATED_ADDONS[@]} addons\n"
        message+="❌ Failed: ${#FAILED_ADDONS[@]} addons\n\n"
        
        if [ ${#CHECKED_ADDONS[@]} -gt 0 ]; then
            message+="📋 Checked Addons:\n"
            for addon in "${CHECKED_ADDONS[@]}"; do
                message+="- $addon\n"
            done
            message+="\n"
        fi

        if [ ${#UPDATED_ADDONS[@]} -gt 0 ]; then
            message+="🆕 Updated Addons:\n"
            for addon in "${UPDATED_ADDONS[@]}"; do
                message+="- $addon\n"
            done
            message+="\n"
        fi

        if [ ${#FAILED_ADDONS[@]} -gt 0 ]; then
            message+="⚠️ Failed Addons:\n"
            for addon in "${FAILED_ADDONS[@]}"; do
                message+="- $addon\n"
            done
        fi

        send_gotify "Addon Update Report" "$message"
    fi

    echo "Update process completed"
    echo "Checked: ${#CHECKED_ADDONS[@]}, Updated: ${#UPDATED_ADDONS[@]}, Failed: ${#FAILED_ADDONS[@]}"
}

# Start the update process
update_addons
