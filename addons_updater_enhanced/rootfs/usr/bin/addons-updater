#!/bin/bash
set -eo pipefail

# Load configuration
CONFIG="/data/options.json"
source /etc/cont-init.d/addons-updater

# Initialize variables
TOTAL_ADDONS=0
UPDATED_ADDONS=0
UP_TO_DATE_ADDONS=0
FAILED_ADDONS=0
UPDATE_DETAILS=""
START_TIME=$(date +%s)

# Notification function
send_notification() {
  local title="$1"
  local message="$2"
  
  if [ "$ENABLE_NOTIFICATIONS" = "true" ] && \
     [ -n "$GOTIFY_URL" ] && \
     [ -n "$GOTIFY_TOKEN" ]; then
    curl -sSf -m 10 -X POST \
      -H "Content-Type: application/json" \
      -d "{\"title\":\"$title\",\"message\":\"$message\",\"priority\":5}" \
      "$GOTIFY_URL/message?token=$GOTIFY_TOKEN" >/dev/null || true
  fi
}

# Logging function
log() {
  local level="$1"
  local message="$2"
  local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  
  echo "[$timestamp] [$level] $message" | tee -a "/var/log/addons-updater.log"
  send_notification "Addon Updater $level" "$message"
}

# Version comparison
version_gt() {
  [ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]
}

# Get latest version
get_latest_version() {
  local repo="$1"
  
  if [ "$REPO_SOURCE" = "gitea" ]; then
    curl_cmd=(curl -sSf -m "$TIMEOUT" -H "Authorization: token $GITEA_TOKEN")
    [ "$VALIDATE_SSL" = "false" ] && curl_cmd+=(-k)
    "${curl_cmd[@]}" "$GITEA_API_URL/repos/$repo/releases/latest" | jq -r '.tag_name'
  else
    curl_cmd=(curl -sSf -m "$TIMEOUT")
    [ "$VALIDATE_SSL" = "false" ] && curl_cmd+=(-k)
    "${curl_cmd[@]}" "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name'
  fi
}

# Process single addon
process_addon() {
  local addon_dir="$1"
  local addon_name=$(basename "$addon_dir")
  local config_file="$addon_dir/config.json"
  local version_file="$addon_dir/VERSION"
  
  ((TOTAL_ADDONS++))
  
  # Validate config
  if [ ! -f "$config_file" ]; then
    log "warning" "Missing config.json in $addon_name"
    UPDATE_DETAILS+="‚ö†Ô∏è $addon_name: Missing config\n"
    ((FAILED_ADDONS++))
    return 1
  fi
  
  local current_version=$(jq -r '.version' "$config_file")
  local upstream_repo=$(jq -r '.upstream_repo' "$config_file")
  
  if [ -z "$upstream_repo" ]; then
    log "warning" "No upstream_repo in $addon_name"
    UPDATE_DETAILS+="‚ö†Ô∏è $addon_name: No upstream\n"
    ((FAILED_ADDONS++))
    return 1
  fi
  
  # Get latest version
  local latest_version
  if ! latest_version=$(get_latest_version "$upstream_repo"); then
    log "error" "Failed to check version for $upstream_repo"
    UPDATE_DETAILS+="‚ùå $addon_name: Version check failed\n"
    ((FAILED_ADDONS++))
    return 1
  fi
  
  if [ -z "$latest_version" ]; then
    log "warning" "Empty version for $upstream_repo"
    UPDATE_DETAILS+="‚ö†Ô∏è $addon_name: Empty version\n"
    ((FAILED_ADDONS++))
    return 1
  fi
  
  # Version comparison
  if version_gt "$latest_version" "$current_version"; then
    log "info" "Updating $addon_name: $current_version ‚Üí $latest_version"
    UPDATE_DETAILS+="üîÑ $addon_name: $current_version ‚Üí $latest_version\n"
    
    if [ "$DRY_RUN" != "true" ]; then
      # Update config
      jq --arg ver "$latest_version" '.version = $ver' "$config_file" > "$config_file.tmp"
      mv "$config_file.tmp" "$config_file"
      
      # Update VERSION file
      [ -f "$version_file" ] && echo "$latest_version" > "$version_file"
      
      # Stage changes
      git add "$config_file" "$version_file" 2>/dev/null
    fi
    ((UPDATED_ADDONS++))
  else
    log "debug" "$addon_name up-to-date ($current_version)"
    UPDATE_DETAILS+="‚úÖ $addon_name: $current_version\n"
    ((UP_TO_DATE_ADDONS++))
  fi
}

### MAIN EXECUTION ###
log "info" "Starting addon updates (Source: $REPO_SOURCE)"

cd "$REPO_PATH" || {
  log "error" "Cannot access repo path: $REPO_PATH"
  exit 1
}

# Update local repo
git fetch origin "$REPO_BRANCH" || {
  log "error" "Git fetch failed"
  exit 1
}

# Process addons
for path in "${ADDON_PATHS[@]}"; do
  full_path="$REPO_PATH/$path"
  
  [ ! -d "$full_path" ] && {
    log "warning" "Addon path not found: $full_path"
    continue
  }
  
  for addon_dir in "$full_path"/*; do
    [ -d "$addon_dir" ] && process_addon "$addon_dir"
  done
done

# Commit changes
if [ "$DRY_RUN" != "true" ] && [ "$UPDATED_ADDONS" -gt 0 ]; then
  git commit -m "Update $UPDATED_ADDONS addons $(date '+%Y-%m-%d %H:%M:%S')"
  
  if [ "$UPDATE_MODE" = "push" ]; then
    git push origin "$REPO_BRANCH" || {
      log "error" "Failed to push changes"
      exit 1
    }
  fi
fi

# Final report
DURATION=$(( $(date +%s) - START_TIME ))
SUMMARY="Update completed in ${DURATION}s\n"
SUMMARY+="üîÑ Updated: $UPDATED_ADDONS\n"
SUMMARY+="‚úÖ Current: $UP_TO_DATE_ADDONS\n"
SUMMARY+="‚ùå Failed: $FAILED_ADDONS\n"
SUMMARY+="üìÇ Total: $TOTAL_ADDONS\n\n"
SUMMARY+="$UPDATE_DETAILS"

log "info" "$SUMMARY"
exit 0
