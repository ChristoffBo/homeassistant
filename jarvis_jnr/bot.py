import os, json, time, asyncio, requests, websockets, schedule, random, re, yaml
from tabulate import tabulate
from datetime import datetime, timezone

# -----------------------------
# Config
# -----------------------------
BOT_NAME = os.getenv("BOT_NAME", "Jarvis Jnr")
BOT_ICON = os.getenv("BOT_ICON", "ü§ñ")
GOTIFY_URL = os.getenv("GOTIFY_URL")
CLIENT_TOKEN = os.getenv("GOTIFY_CLIENT_TOKEN")
APP_TOKEN = os.getenv("GOTIFY_APP_TOKEN")
APP_NAME = os.getenv("JARVIS_APP_NAME", "Jarvis")

RETENTION_HOURS = int(os.getenv("RETENTION_HOURS", "24"))
SILENT_REPOST = os.getenv("SILENT_REPOST", "true").lower() in ("1", "true", "yes")
BEAUTIFY_ENABLED = os.getenv("BEAUTIFY_ENABLED", "true").lower() in ("1", "true", "yes")

jarvis_app_id = None

# ANSI color codes
ANSI = {
    "reset": "\033[0m",
    "bold": "\033[1m",
    "red": "\033[91m",
    "green": "\033[92m",
    "yellow": "\033[93m",
    "cyan": "\033[96m",
    "white": "\033[97m",
}

def colorize(text, level="info"):
    if "error" in level.lower() or "fail" in level.lower():
        return f"{ANSI['red']}{text}{ANSI['reset']}"
    if "success" in level.lower() or "completed" in level.lower() or "running" in level.lower():
        return f"{ANSI['green']}{text}{ANSI['reset']}"
    if "warn" in level.lower():
        return f"{ANSI['yellow']}{text}{ANSI['reset']}"
    return f"{ANSI['cyan']}{text}{ANSI['reset']}"

# -----------------------------
# Send message
# -----------------------------
def send_message(title, message, priority=5):
    url = f"{GOTIFY_URL}/message?token={APP_TOKEN}"
    data = {
        "title": f"{BOT_ICON} {BOT_NAME}: {title}",
        "message": message,
        "priority": priority,
    }
    try:
        r = requests.post(url, json=data, timeout=5)
        r.raise_for_status()
        return True
    except Exception as e:
        print(f"[{BOT_NAME}] ‚ùå send_message failed: {e}")
        return False

# -----------------------------
# Purge helpers
# -----------------------------
def purge_app_messages(appid):
    url = f"{GOTIFY_URL}/application/{appid}/message"
    headers = {"X-Gotify-Key": CLIENT_TOKEN}
    try:
        requests.delete(url, headers=headers, timeout=10)
    except Exception as e:
        print(f"[{BOT_NAME}] ‚ùå purge_app_messages failed: {e}")

def purge_non_jarvis_apps():
    global jarvis_app_id
    if not jarvis_app_id:
        return
    try:
        url = f"{GOTIFY_URL}/application"
        headers = {"X-Gotify-Key": CLIENT_TOKEN}
        r = requests.get(url, headers=headers, timeout=5)
        for app in r.json():
            if app.get("id") != jarvis_app_id:
                purge_app_messages(app.get("id"))
    except Exception as e:
        print(f"[{BOT_NAME}] ‚ùå purge_non_jarvis_apps failed: {e}")

def purge_old_messages():
    url = f"{GOTIFY_URL}/message"
    headers = {"X-Gotify-Key": CLIENT_TOKEN}
    try:
        r = requests.get(url, headers=headers, timeout=10)
        messages = r.json().get("messages", [])
        now = datetime.now(timezone.utc).timestamp()
        cutoff = now - (RETENTION_HOURS * 3600)
        for msg in messages:
            ts = msg.get("date")
            if ts:
                msg_time = datetime.fromisoformat(ts.replace("Z", "+00:00")).timestamp()
                if msg_time < cutoff:
                    del_url = f"{GOTIFY_URL}/message/{msg['id']}"
                    requests.delete(del_url, headers=headers, timeout=5)
    except Exception as e:
        print(f"[{BOT_NAME}] ‚ùå purge_old_messages failed: {e}")

# -----------------------------
# Resolve app_id
# -----------------------------
def resolve_app_id():
    global jarvis_app_id
    try:
        url = f"{GOTIFY_URL}/application"
        headers = {"X-Gotify-Key": CLIENT_TOKEN}
        r = requests.get(url, headers=headers, timeout=5)
        for app in r.json():
            if app.get("name") == APP_NAME:
                jarvis_app_id = app.get("id")
    except Exception as e:
        print(f"[{BOT_NAME}] ‚ùå resolve_app_id failed: {e}")

# -----------------------------
# Beautifier (shortened here - unchanged from before)
# -----------------------------
def beautify_message(title, raw):
    # (keeping previous beautify code unchanged for brevity in this snippet)
    formatted = f"üõ∞ SYSTEM MESSAGE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n{colorize(raw, 'info')}"

    closings = [
        "üß† Analysis complete ‚Äî Jarvis Jnr",
        "‚ö° Task executed at optimal efficiency",
        "‚úÖ Operation verified by Jarvis Jnr",
        "üõ∞ Transmission relayed successfully",
        "üìä Report compiled and archived",
        "üîç Inspection concluded ‚Äî no anomalies detected",
        "‚öôÔ∏è Automated by Jarvis Jnr",
        "üì° Standing by for further input",
        "üñ• Process logged in system memory",
        "üîí Secure execution confirmed",
        "üåê Status synchronized across network",
        "üöÄ Operation finished ‚Äî systems nominal",
        "üß© Adaptive workflow completed",
        "üîß Diagnostics concluded ‚Äî stable",
        "üì¢ Notification delivered by AI core",
        "üéØ Objective reached successfully",
        "üîã Energy levels optimal ‚Äî continuing operations",
        "üõ° Defensive protocols maintained",
        "üìé Documented for future reference",
        "üè∑ Tagged and indexed by Jarvis",
        "‚è± Execution time recorded",
        "üìÇ Archived in knowledge base",
        "üßë‚Äçüíª Operator assistance provided",
        "üóÇ Classified and stored securely",
        "üóù Access log updated ‚Äî all secure",
        "üëÅ Visual scan of event completed",
        "üõ† AI maintenance cycle closed",
        "üí° No anomalies detected at this stage",
        "‚ú® End of report ‚Äî Jarvis Jnr",
        "ü§ñ Yours truly, Jarvis Jnr",
    ]
    return f"{formatted}\n\n{random.choice(closings)}"

# -----------------------------
# Scheduler
# -----------------------------
def run_scheduler():
    schedule.every(10).minutes.do(purge_old_messages)
    if BEAUTIFY_ENABLED:
        schedule.every(5).minutes.do(purge_non_jarvis_apps)
    while True:
        schedule.run_pending()
        time.sleep(1)

# -----------------------------
# Listener
# -----------------------------
async def listen():
    ws_url = GOTIFY_URL.replace("http://", "ws://").replace("https://", "wss://")
    ws_url += f"/stream?token={CLIENT_TOKEN}"

    while True:
        try:
            async with websockets.connect(ws_url, ping_interval=30, ping_timeout=10) as ws:
                async for msg in ws:
                    try:
                        data = json.loads(msg)
                        appid = data.get("appid")
                        message = data.get("message", "")
                        extras = data.get("extras", {})

                        if jarvis_app_id and appid == jarvis_app_id:
                            continue

                        has_image = extras.get("client::display", {}).get("image") if extras else False

                        if BEAUTIFY_ENABLED:
                            final_msg = beautify_message(data.get("title", ""), message)
                            repost_priority = 0 if SILENT_REPOST else 5
                            if send_message(data.get("title", ""), final_msg, priority=repost_priority):
                                if not has_image:
                                    purge_non_jarvis_apps()
                        else:
                            print(f"[{BOT_NAME}] Beautify disabled ‚Äî keeping original")
                    except Exception as e:
                        print(f"[{BOT_NAME}] ‚ùå Error processing message: {e}")
        except Exception as e:
            print(f"[{BOT_NAME}] ‚ùå WebSocket connection failed: {e}")
            await asyncio.sleep(10)

# -----------------------------
# Entrypoint
# -----------------------------
if __name__ == "__main__":
    print(f"[{BOT_NAME}] Starting add-on...")
    resolve_app_id()
    startup_msgs = [
        "ü§ñ JARVIS JNR ONLINE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüëë Ready to rule notifications\nüì° Listening for events\n‚ö° Systems nominal\n\nüß† Standing by",
        "üöÄ BOOT COMPLETE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚úÖ Initialization finished\nüì° Awaiting input\n‚ö° Operational",
        "üõ∞ SYSTEM STARTUP\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nü§ñ Core AI online\nüìä Monitoring engaged\nüõ° Defensive protocols active",
        "‚úÖ ALL SYSTEMS NOMINAL\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüñ• Core AI running\nüì° Event stream open\nüîã Power levels stable",
        "üì° SYNC COMPLETE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚öôÔ∏è Notification pipeline active\nüõ° Watching infrastructure\nüß† Adaptive intelligence online",
        "üåê NETWORK READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Gotify stream connected\nüõ∞ Jarvis Jnr listening\n‚ö° Awaiting instructions",
        "‚ú® BOOT SEQUENCE COMPLETE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚úÖ Initialization finished\nüß† Intelligence core ready\nüì° Events inbound",
        "üîß INITIALIZATION DONE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüìä Subsystems engaged\nüõ∞ AI standing by\nüöÄ Systems at velocity",
        "üìä STATUS: ONLINE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüñ• Console active\nüì° Events visible\n‚ö° AI operator present",
        "üõ° SHIELDING ENABLED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚úÖ Event protection\nüì° Core systems online\nü§ñ Jarvis Jnr standing by",
        "‚ö° POWER OPTIMAL\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüîã Energy flow stable\nüì° Event link active\nüß† Neural routines online",
        "üîç SELF-CHECK PASSED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚úÖ Diagnostics clean\n‚ö° Performance optimal\nüì° Ready to process",
        "üåü AI READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nü§ñ Jarvis Jnr awakened\nüì° Standing watch\nüõ° Securing notifications",
        "üö® ALERT MODE READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Streams locked\nüõ° Monitoring enabled\n‚ö° Response instant",
        "üìÇ KNOWLEDGE BASE LOADED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Input channels ready\nüß† AI processing active\n‚ú® Standing by",
        "üéØ TARGET LOCKED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚ö° Awaiting next instruction\nü§ñ Jarvis Jnr ready\nüì° Notifications inbound",
        "üõ∞ UPLINK STABLE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Gotify stream secure\nüõ° AI operational\n‚ö° Fully online",
        "‚ú® OPERATIONAL CYCLE STARTED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüß† AI core ready\nüì° Monitoring flows\nüöÄ Standing by",
        "üìä DATA STREAM OPEN\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Listening to events\nüß† AI parsing engaged\n‚ö° Secure link stable",
        "üîí SECURITY MODE ACTIVE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüõ° Jarvis Jnr guarding events\nüì° Uplink confirmed\n‚ö° All green",
        "üì° STREAM INIT\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nü§ñ Notifications will be managed\nüß† AI safeguards online\n‚ö° Stability ensured",
        "üõ∞ CONNECTION LIVE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Data link to Gotify secured\nüõ° Monitoring pipelines\nü§ñ Jarvis Jnr vigilant",
        "üöÄ AI ENGAGED\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüìä Neural cores aligned\nüõ° Systems protected\nüì° Jarvis Jnr standing by",
        "üîé STATUS: READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Stream validated\nüß† AI analysis online\n‚ö° Secure operations",
        "üåå STARLINK READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Notifications pipeline glowing\nüß† AI aligned\nüöÄ All modules active",
        "üõ† MODULES READY\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\n‚ö° Neural subroutines linked\nüì° Input channels clean\nü§ñ Core AI steady",
        "üé∂ AI CHIME\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Notifications orchestrated\nüõ° Protected by Jarvis Jnr\n‚ú® Standing by",
        "‚ö° TURBO MODE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nüì° Streams wide open\nü§ñ Processing with velocity\nüõ° Systems defended",
        "üì° AI GUARDIAN ONLINE\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nü§ñ Securing flows\nüõ° Monitoring 24/7\n‚ú® Jarvis Jnr operational",
        "‚ú® WELCOME BACK\n‚ïæ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïº\nü§ñ Jarvis Jnr here again\nüì° Notifications safe\nüõ° Standing guard",
    ]
    send_message("Startup", random.choice(startup_msgs), priority=5)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(listen())
    loop.run_in_executor(None, run_scheduler)
    loop.run_forever()
