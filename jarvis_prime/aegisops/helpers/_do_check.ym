---
# Executes one check_item (ping|tcp|http) and appends normalized result.

- name: ensure result bucket exists
  set_fact:
    _results: "{{ _results | default([]) }}"

- name: ping check
  when: (check_item.mode | lower) == 'ping'
  block:
    - name: ansible ping
      ansible.builtin.ping:
      register: _chk
      ignore_errors: yes

    - name: append ping result
      set_fact:
        _results: "{{ _results + [ {
          'ts': lookup('pipe','date +%Y-%m-%dT%H:%M:%S'),
          'name': (check_item.name | default('ping')),
          'mode': 'ping',
          'target': (check_item.target | default(inventory_hostname)),
          'status': ('ok' if (_chk is defined and _chk.ping is defined and _chk.ping == 'pong') else 'fail'),
          'detail': (_chk | to_nice_json)
        } ] }}"

- name: tcp check
  when: (check_item.mode | lower) == 'tcp'
  block:
    - name: wait for tcp port
      ansible.builtin.wait_for:
        host: "{{ check_item.target | default(inventory_hostname) }}"
        port: "{{ check_item.port | int }}"
        state: started
        timeout: "{{ (check_item.timeout_s | default(5)) | int }}"
      register: _chk
      ignore_errors: yes

    - name: append tcp result
      set_fact:
        _results: "{{ _results + [ {
          'ts': lookup('pipe','date +%Y-%m-%dT%H:%M:%S'),
          'name': (check_item.name | default('tcp')),
          'mode': 'tcp',
          'target': (check_item.target | default(inventory_hostname)),
          'status': ('ok' if (_chk is defined and (_chk.failed is not defined or not _chk.failed)) else 'fail'),
          'detail': (_chk | to_nice_json)
        } ] }}"

- name: http check
  when: (check_item.mode | lower) == 'http'
  block:
    - name: GET url
      ansible.builtin.uri:
        url: "{{ check_item.url }}"
        method: GET
        status_code: "{{ check_item.expect | default([200]) }}"
        validate_certs: no
        timeout: "{{ (check_item.timeout_s | default(5)) | int }}"
      register: _chk
      ignore_errors: yes

    - name: append http result
      set_fact:
        _results: "{{ _results + [ {
          'ts': lookup('pipe','date +%Y-%m-%dT%H:%M:%S'),
          'name': (check_item.name | default('http')),
          'mode': 'http',
          'target': (check_item.url),
          'status': ('ok' if (_chk is defined and (_chk.failed is not defined or not _chk.failed)) else 'fail'),
          'detail': (_chk | to_nice_json)
        } ] }}"
